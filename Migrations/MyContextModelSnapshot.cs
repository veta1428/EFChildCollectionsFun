// <auto-generated />
using EChildCollectionsFun;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EChildCollectionsFun.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EChildCollectionsFun.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EChildCollectionsFun.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EChildCollectionsFun.PersonCourse", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("PersonCourse", (string)null);
                });

            modelBuilder.Entity("EChildCollectionsFun.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonAnotherId")
                        .HasColumnType("int");

                    b.Property<int>("PersonOneId")
                        .HasColumnType("int");

                    b.Property<int>("RelatioshipTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonAnotherId");

                    b.HasIndex("PersonOneId");

                    b.HasIndex("RelatioshipTypeId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("EChildCollectionsFun.RelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RelationshipType");
                });

            modelBuilder.Entity("EChildCollectionsFun.PersonCourse", b =>
                {
                    b.HasOne("EChildCollectionsFun.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EChildCollectionsFun.Person", "Person")
                        .WithMany("Courses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EChildCollectionsFun.Relationship", b =>
                {
                    b.HasOne("EChildCollectionsFun.Person", null)
                        .WithMany("RelationshipAnothers")
                        .HasForeignKey("PersonAnotherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EChildCollectionsFun.Person", null)
                        .WithMany("RelationshipOnes")
                        .HasForeignKey("PersonOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EChildCollectionsFun.RelationshipType", "RelationshipType")
                        .WithMany()
                        .HasForeignKey("RelatioshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelationshipType");
                });

            modelBuilder.Entity("EChildCollectionsFun.Person", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("RelationshipAnothers");

                    b.Navigation("RelationshipOnes");
                });
#pragma warning restore 612, 618
        }
    }
}
